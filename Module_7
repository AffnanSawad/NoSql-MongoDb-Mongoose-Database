//    Basics & Advanced Level Of Node JS & Express JS   //

NODE JS : Its a server side run time language which is used in server side. 

<!-- ### **Modules in Node.js**   -->
A **module** in Node.js is a reusable piece of code that can be imported and exported between files. There are two main module systems:  

1. **CommonJS (CJS)** ‚Äì The default module system in Node.js.  
2. **ECMAScript Modules (ESM)** ‚Äì The modern JavaScript module system.

---

### **1. CommonJS (CJS)**
- Uses `require()` to import modules.
- Uses `module.exports` or `exports` to export modules.
- Synchronous loading (good for backend).

#### **Example of CommonJS**
##### `math.js` (Exporting)
```js
// CommonJS module
function add(a, b) {
    return a + b;
}

module.exports = { add };
```

##### `app.js` (Importing)
```js
// Importing CommonJS module
const math = require('./math');

console.log(math.add(2, 3)); // Output: 5
```

---

### **2. ECMAScript Modules (ESM)**
- Uses `import` and `export`.
- Asynchronous loading (better for performance).
- Needs `"type": "module"` in `package.json` or using `.mjs` extension.

#### **Example of ESM**
##### `math.mjs` (Exporting)
```js
// ECMAScript Module
export function add(a, b) {
    return a + b;
}
```

##### `app.mjs` (Importing)
```js
// Importing ESM module
import { add } from './math.mjs';

console.log(add(2, 3)); // Output: 5
```

---

### **Key Differences: CommonJS vs ESM**
| Feature | CommonJS (CJS) | ECMAScript Modules (ESM) |
|---------|--------------|------------------|
| Syntax  | `require()` / `module.exports` | `import` / `export` |
| Execution | Synchronous | Asynchronous |
| Default in Node.js | Yes | No (must enable in `package.json`) |
| Use Case | Server-side scripts | Modern JavaScript, Frontend & Backend |

#### **When to Use What?**
- **Use CommonJS** if working with legacy Node.js projects or dependencies that require it.  
- **Use ESM** for modern projects, especially if you need tree-shaking and better performance.  

Let me know if you need further clarification! üöÄ





<!-- // File System : Synchronous VS Asynchronous . -->

### **File System (fs) Module in Node.js**  
The `fs` module allows reading and writing files in **synchronous** (blocking) and **asynchronous** (non-blocking) ways.

---

### **1Ô∏è‚É£ Synchronous (Blocking)**
- Code waits for file operation to complete.
- Simple but slows down execution.

#### **Read & Write (Synchronous)**
```js
const fs = require('fs');

// Writing to a file (Sync)
fs.writeFileSync('file.txt', 'Hello, World!');

// Reading from a file (Sync)
const data = fs.readFileSync('file.txt', 'utf8');
console.log(data);

console.log('This runs after file reading.');
```
üîπ **Output:**  
```
Hello, World!
This runs after file reading.
```

‚úî Blocks execution until reading/writing is done.

---

### **2Ô∏è‚É£ Asynchronous (Non-blocking)**
- Does **not** wait for completion.
- Uses **callbacks** or **Promises** for handling operations.

#### **Read & Write (Asynchronous)**
```js
const fs = require('fs');

// Writing to a file (Async)
fs.writeFile('file.txt', 'Hello, Async!', (err) => {
    if (err) throw err;
    console.log('File written successfully!');
});

// Reading from a file (Async)
fs.readFile('file.txt', 'utf8', (err, data) => {
    if (err) throw err;
    console.log(data);
});

console.log('This runs first!');
```
üîπ **Output:**  
```
This runs first!
File written successfully!
Hello, Async!
```

‚úî Executes the next line without waiting.

---

### **Key Differences: Synchronous vs Asynchronous**
| Feature | Synchronous | Asynchronous |
| Execution | Blocking | Non-blocking |
| Speed | Slower | Faster |
| Uses | Small tasks | Large files & servers |

‚úÖ **Use Sync** for simple tasks.  
‚úÖ **Use Async** for better performance in large applications.  



<!--   Event driven architecture, create your own events -->


### **Event-Driven Architecture in Node.js**

In Node.js, everything works around **events**. The core concept of an event-driven architecture is that code execution is driven by events, like user actions, messages, or system triggers. Node.js uses the **EventEmitter** class for this.

---

### **Creating Your Own Events in Node.js**

You can create custom events in Node.js by using the `EventEmitter` class from the `events` module.

#### **Steps:**
1. **Import the `events` module**.
2. **Create an instance of `EventEmitter`**.
3. **Define your event with `on()`** (listener).
4. **Trigger the event with `emit()`**.

---

### **Example of Creating Your Own Event**

#### **1Ô∏è‚É£ Creating an Event (with `EventEmitter`)**

```js
const EventEmitter = require('events'); // Import EventEmitter class

// Create an event emitter instance
const myEmitter = new EventEmitter();

// Define an event and its listener
myEmitter.on('event', () => {
    console.log('Event has been triggered!');
});

// Emit the event
myEmitter.emit('event'); // Output: Event has been triggered!
```

---

### **2Ô∏è‚É£ Passing Arguments with Events**

You can also pass arguments when emitting events, and listeners can access those values.

#### **Example: Passing Arguments**

```js
const EventEmitter = require('events'); // Import EventEmitter class

// Create an event emitter instance
const myEmitter = new EventEmitter();

// Define an event with listener that accepts arguments
myEmitter.on('greet', (name) => {
    console.log(`Hello, ${name}!`);
});

// Emit the event with an argument
myEmitter.emit('greet', 'Affnan'); // Output: Hello, Affnan!
```

---

### **3Ô∏è‚É£ Using Multiple Listeners**

You can have multiple listeners for the same event.

#### **Example: Multiple Listeners**

```js
const EventEmitter = require('events'); // Import EventEmitter class

// Create an event emitter instance
const myEmitter = new EventEmitter();

// Define multiple listeners for the same event
myEmitter.on('event', () => {
    console.log('Listener 1 triggered!');
});

myEmitter.on('event', () => {
    console.log('Listener 2 triggered!');
});

// Emit the event
myEmitter.emit('event');
// Output:
// Listener 1 triggered!
// Listener 2 triggered!
```

---

<!-- Stream and buffer, create your own server -->

### **Streams and Buffers in Node.js**

In Node.js, **Streams** and **Buffers** are fundamental for handling large data efficiently.

---



There are four types of streams:
- **Readable streams** (e.g., reading files)
- **Writable streams** (e.g., writing to files)
- **Duplex streams** (both readable and writable)
- **Transform streams** (modifies data as it is read or written)

---

### **3Ô∏è‚É£ Creating Your Own Server with Streams**

In this example, we'll create a simple HTTP server using **streams** to handle incoming requests.

#### **Example: Simple HTTP Server**

```js
const http = require('http'); // Import HTTP module
const fs = require('fs'); // Import File System module

const server = http.createServer((req, res) => {
    // Creating a readable stream from a file
    const readStream = fs.createReadStream('file.txt', 'utf8');

    // Pipe the stream to the response (sending file data to the client)
    readStream.pipe(res);
});

// Server listens on port 3000
server.listen(5000, () => {
    console.log('Server is running on http://localhost:5000');
});
```

---

### **4Ô∏è‚É£ Using Writable Stream (Writing Data)**

Here‚Äôs an example of how you can write data to a file using writable streams.

#### **Example: Write to File Using Stream**

```js
const fs = require('fs');

// Create a writable stream
const writeStream = fs.createWriteStream('output.txt');

// Writing data to the file stream
writeStream.write('Hello, Stream World!\n');
writeStream.write('This is another line.\n');

// End the stream
writeStream.end(() => {
    console.log('Data written to output.txt');
});
```

---

### **Summary**
- **Buffer**: A temporary storage for raw binary data. Useful in I/O operations.
- **Stream**: Allows data to be read or written in chunks. It's efficient for handling large amounts of data.
- **Creating Server**: You can use streams to handle file I/O in an HTTP server.



<!-- Parsers , Request - Response -->
üîπ Why do we need parsers?
When a user sends data (like a form submission or JSON request), Express cannot understand it directly. A parser converts the data into a format that Express can read.

<!-- parser -->
import express from "express";

const app = express();
app.use(express.json()); // This parser helps Express read JSON data

app.post("/data", (req, res) => {
  console.log(req.body); // Now we can access JSON data sent by the client
  res.send("Data received");
});

app.listen(3000, () => console.log("Server is running..."));


<!-- Request -->
The request object contains all the data sent by the client.

üîπ Some useful properties in req:
Property	Purpose	Example
req.body	Data sent in request body	{ "name": "Alice" }
req.query	URL query parameters	/user?name=Alice ‚Üí { name: "Alice" }
req.params	Route parameters	/user/:id ‚Üí /user/123 ‚Üí { id: "123" }
req.headers	Request headers	{ "Content-Type": "application/json" }



<!--  Middleware's -->

# **üìå Middleware in Express.js (Easiest Explanation)**
Middleware is like a **checkpoint** between the client‚Äôs request and the server‚Äôs response. It **processes requests** before they reach the final route handler.

---

## **üîπ What is Middleware?**
Middleware functions are used to:  
‚úÖ Modify the request (`req`) or response (`res`) objects  
‚úÖ Execute code before passing the request to the next function  
‚úÖ End the request-response cycle (if needed)  
‚úÖ Call the next middleware function using `next()`

---

## **üîπ How Middleware Works?**
Every request in Express.js goes through **middleware functions** before reaching the final response.  

üõ£Ô∏è **Request Flow:**  
```
Client ‚Üí Middleware 1 ‚Üí Middleware 2 ‚Üí Route Handler ‚Üí Response
```

---

## **üìå Types of Middleware**
1Ô∏è‚É£ **Built-in Middleware** ‚Üí Middleware already included in Express  
2Ô∏è‚É£ **Third-party Middleware** ‚Üí Middleware from external libraries  
3Ô∏è‚É£ **Custom Middleware** ‚Üí Middleware functions you create  

---

## **1Ô∏è‚É£ Built-in Middleware**
Express has some **predefined middleware** that you can use.

| Middleware | Purpose |
|------------|---------|
| `express.json()` | Parses incoming JSON requests |
| `express.urlencoded({ extended: true })` | Parses form data |
| `express.static('public')` | Serves static files like images, CSS |

‚úÖ **Example: Using Built-in Middleware**  
```ts
import express from "express";

const app = express();

// Built-in middleware
app.use(express.json()); // Parses JSON data
app.use(express.urlencoded({ extended: true })); // Parses form data

app.post("/data", (req, res) => {
  console.log(req.body); // Now we can access form or JSON data
  res.send("Data received");
});

app.listen(3000, () => console.log("Server running..."));
```

---

## **2Ô∏è‚É£ Third-party Middleware**
These are external packages that add extra features.

| Middleware | Purpose |
|------------|---------|
| `morgan` | Logs request details |
| `cors` | Allows cross-origin requests |
| `cookie-parser` | Parses cookies |

‚úÖ **Example: Using Third-party Middleware (`morgan`)**  
```ts
import express from "express";
import morgan from "morgan";

const app = express();

// Third-party middleware
app.use(morgan("dev")); // Logs incoming requests

app.get("/", (req, res) => {
  res.send("Hello, Middleware!");
});

app.listen(3000, () => console.log("Server running..."));
```

---

## **3Ô∏è‚É£ Custom Middleware**
You can create your own middleware to **process requests**.

‚úÖ **Example: Logging Middleware**
```ts
const logger = (req, res, next) => {
  console.log(`${req.method} ${req.url} at ${new Date().toISOString()}`);
  next(); // Move to the next middleware/route handler
};

app.use(logger); // Apply middleware globally
```

‚úÖ **Example: Authentication Middleware**
```ts
const authMiddleware = (req, res, next) => {
  const token = req.headers.authorization;
  if (token === "my-secret-token") {
    next(); // Allow the request
  } else {
    res.status(403).send("Unauthorized"); // Stop the request
  }
};

app.get("/secure", authMiddleware, (req, res) => {
  res.send("Welcome to the secure route!");
});
```

---

## **üî• Summary**
| Middleware Type | Example Usage |
|----------------|--------------|
| **Built-in** | `express.json()`, `express.static()` |
| **Third-party** | `morgan`, `cors`, `cookie-parser` |
| **Custom** | Logging, authentication |

‚úÖ **Middleware is important for:**  
‚úî Logging requests  
‚úî Authentication & security  
‚úî Handling errors  
‚úî Parsing request data  



<!--  Handeling ERRORS -->

# **üìå Error Handling in Express.js (Easy Explanation)**  
Error handling in Express means **catching errors** and **sending proper responses** instead of crashing the server.  

---

## **üîπ Why is Error Handling Important?**  
‚úÖ Prevents server crashes  
‚úÖ Sends **useful error messages** to clients  
‚úÖ Helps in debugging issues  

---

## **üìå Basic Error Handling**  
Express automatically **detects errors**, but we can handle them properly using a **middleware function**.

‚úÖ **Example: Basic Error Handling Middleware**  
```ts
import express from "express";

const app = express();

app.get("/", (req, res) => {
  throw new Error("Something went wrong!"); // This will trigger the error middleware
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack); // Logs the error to the console
  res.status(500).json({ message: "Internal Server Error" });
});

app.listen(3000, () => console.log("Server running..."));
```
> Now, visiting `/` will return `{ "message": "Internal Server Error" }` instead of crashing.

---

## **üìå Handling Errors in Asynchronous Code**
For async functions (like database queries), we need `try...catch` to **properly catch errors**.

‚úÖ **Example: Handling Async Errors**
```ts
app.get("/async", async (req, res, next) => {
  try {
    // Simulating async error
    const data = await fetchData(); // Assume this function fails
    res.json(data);
  } catch (error) {
    next(error); // Pass error to the middleware
  }
});
```
> Without `try...catch`, an async error **won't be caught** by Express.

---

## **üìå Using `express-async-handler` (Easier Async Error Handling)**
Instead of writing `try...catch` everywhere, we can use **`express-async-handler`**.

‚úÖ **Example: Using `express-async-handler`**
```ts
import asyncHandler from "express-async-handler";

app.get(
  "/users",
  asyncHandler(async (req, res) => {
    const users = await fetchUsers(); // Assume this fetches users
    res.json(users);
  })
);
```
> This **automatically** catches errors and passes them to the error handler.

---

## **üìå Custom Error Handling with Status Codes**
By default, Express **returns a 500 status code** for errors. But we can set custom error messages & codes.

‚úÖ **Example: Custom Error Handler**
```ts
app.use((err, req, res, next) => {
  const statusCode = err.statusCode || 500;
  res.status(statusCode).json({ message: err.message || "Server Error" });
});
```
Now, we can create errors like this:
```ts
app.get("/notfound", (req, res, next) => {
  const error = new Error("Resource Not Found");
  error.statusCode = 404;
  next(error);
});
```
> Visiting `/notfound` returns `{ "message": "Resource Not Found" }` with **status 404**.

---

## **üìå Handling 404 Errors (Not Found)**
If no route matches the request, we should return a **404 error**.

‚úÖ **Example: Handling 404 Not Found Errors**
```ts
app.use((req, res, next) => {
  res.status(404).json({ message: "Route Not Found" });
});
```
Now, if a user tries an **invalid route**, they get `{ "message": "Route Not Found" }` instead of a confusing error.

----------------------------------------------------------------------
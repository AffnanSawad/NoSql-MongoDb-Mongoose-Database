
//  ............ PRACTICE - MODULE - 5 : ALL QUERY ......... //

// insert One Data
db.test.insertOne({ name : 'Affnan Sawad' , age : 22 , gender : 'Male'})

//  insert many data . must be in Array
db.test.insertMany( [ 
    
    {  name : 'Mamdud Sawad' , age : 20 , gender : 'Male'  }  , 
    
    {  name : 'Afrin Sawad' , age : 1 , gender : 'Female' } ,
    
    { name : 'Affsan Sawad' , age : 2 , gender : 'Male'  } 
    
    
    ])


    //  Find for one Condition and show name , age , gender and sort it
    db.test.find({ age : 40  } , { name : 1 , email : 1 , age : 1 , gender : 1 } ).sort({age : 1 })


    //  find by multiple conditions and show name , age , gender and short by age in asceding order

    db.test.find( { gender : 'Female' , age : 1  } , { name : 1 , age : 1 , gender : 1 }  ).sort({age : 1})

    //  applying Conditions by using Operators : $eq , $gt etc.
    db.test.find({  "name.firstName" : { $eq: "Mariele"   } , "name.lastName" : {$eq: "Dangl" }    } , {name : 1 , age :1 }  ).sort({age:1})


// find that data where age > 18 , age < 100 and gender is "Male" 

db.test.find( {  age : { $gt : 18 , $lt : 100 } , gender : { $eq : "Male" }   }   ,     { name : 1 , age : 1 , email :1 , gender : 1} ).sort({age : 1})


//  specific kono Field er Values dekate hole or na dekate hole : $in / $nin use hoi.

// { field: { $in / $nin: [<value1>, <value2>, ... <valueN> ] } }

db.test.find( { interests :  { $in : [ "Cooking" , "Gaming"] }   } ,  {age : 1 , interests : 1 }   )

db.test.find( { interests :  { $nin : [ "Cooking" , "Gaming" , "Writing"] }   } ,  {age : 1 , interests : 1 }   )

//  Conditions Operators : $and , $or etc .

// { $and: [ { <expression1> }, { <expression2> } , ... , { <expressionN> } ] }

db.test.find(  { $and : [ 
    
    {  age : { $gt : 20 , $lt : 50 }  }  ,  { gender : 'Male'}  
    
    ]   }      , {age : 1 , gender : 1 , interests : 1})


    //  $exist = check kore feild ta ase naki nai.
    db.test.find( { age : { $exists : true}   }  )

    //  $type : Kono field e Specificc type variable pete hole.
    db.test.find( { age : { $type : "number"  }      } )

    //  ........ Update ..........

    //  update : kake update , ki update .
    
    // $set : ager value delete hoye update value bosbe,
    // $addtoSet : ager value gular sathe new value add hbe . [ duplicate value chara]
    //  $push : duplicate value o add hote parbe ager value er sathe.


    db.test.updateOne( { _id : ObjectId("6406ad63fc13ae5a40000065")     } , { $set : {  age : 20 , gender : 'Female' }   }   )


    db.test.updateOne( { _id : ObjectId("6406ad63fc13ae5a40000065")     } , { $addToSet: { friends : ['Affnan Sawad' , 'Mamdud Sawad'] }   }   )

    db.test.updateOne( { _id : ObjectId("6406ad63fc13ae5a40000065")     } , { $push: { friends : ['Affnan Sawad' , 'Mamdud Sawad'] }   }   )


    //  ........ DELETE .............


    //  delete korar jnno .

//  $unset : feild + feild er value soho delete hobe.
//  $pop : just ekta value  delete gbe . 1 hole pichon theke , -1 hole samne theke.
//  $pull : specific value dele kora jave .
//  $pullAll : specificly more than one value delete kora jabe. [array er moddhe]


 db.test.updateOne(  { _id : ObjectId("6406ad65fc13ae5a400000b4")  }  ,
 
  {  $unset : { friends : 1 }}

) 


db.test.find(  { _id :ObjectId("6406ad63fc13ae5a40000065")   }  , 
  
{ $pull : { languages : 'German' } }

) 


// specificly whole Document delete korara jnno .
 db.test.deleteone( {_id : ObjectId('122121212') }  );